MSA = monitoring system application
MSD = monitoring system daemon
MSL = monitoring system leader
FE = front-end application

Nodes are re-indexed from 0 to 99.
On each node, there is an FE and an MSA.
An MSA is an MSD.
It can conditionally be an MSL.

Begin
    SLOWEST_USERS: HashSet[UID] := {}
    INDEX: Uint := get index of the current node

    function GET_CURRENT_TIME(): Uint :=
        CURRENT_TIME: Time := current time in seconds from 00:00
        return CURRENT_TIME

    function GET_CURRENT_ITERATION(): Uint :=
        CURRENT_TIME: Time := GET_CURRENT_TIME
        ITERATION: Uint := (CURRENT_TIME / 60) rounded down
        return ITERATION

    function GET_FIRST_LEADER(): Uint :=
        CURRENT_ITERATION: Uint := GET_CURRENT_ITERATION()
        FIRST_LEADER: Uint := CURRENT_ITERATION modulo 100
        return FIRST_LEADER

    function GET_LEADERS(): Uint :=
        FIRST_LEADER: Uint := GET_FIRST_LEADER()
        LEADERS: [Uint] := [FIRST_LEADER % 100, (FIRST_LEADER + 1) % 100, (FIRST_LEADER + 2) % 100]
        return LEADERS

    function MAIN():
        thread1:
            do: provide the endpoint /daemon for POST requests with payload containing beacon call data

            while true:
                while true
                    (UID, TS1, TS2): (UID, Time, Time) := await a request on /daemon
                    for LEADER in GET_LEADERS():
                        send (UID, TS1, TS2) to /leader endpoint of LEADER
        thread2:
            do: provide the endpoint /slowest for POST requests with payload containing a list of slowest users

            while true:
                SLOWEST_USERS_LIST: [UID] := await a request on /slowest
                SLOWEST_USERS := hashset constructed from SLOWEST_USERS_LIST

        thread3:
            do: provide the endpoint /leader for POST requests with payload containing beacon call data

            ITERATION: Uint := GET_CURRENT_ITERATION()

            while true:
                if INDEX in GET_LEADERS():
                    (UID, TS1, TS2): (UID, Time, Time) := await a request on /leader
                    REQUESTS_WINDOW := append (UID, TS2-TS1, TS2) to REQUESTS_WINDOW
                    NEW_ITERATION: Uint := GET_CURRENT_ITERATION()

                    if NEW_ITERATION != ITERATION:
                        ITERATION := NEW_ITERATION

                        REQUESTS_FILTERED: [(UID, Time, Time)] :=
                            elements (_, _, TS2) from REQUESTS_WINDOW where TS2 < (CURRENT_TIME - TIME_WINDOW)
                        
                        REQUESTS_SORTED: [(UID, Time, Time)] := elements (UID,_,_) from REQUESTS_FILTERED sorted by UID

                        USER_DATA: [(UID, Time)] := empty array
                        
                        USER_TOTAL_TIME: Time := 0
                        USER_TOTAL_REQUESTS: Uint := 0
                        (USER_UID_PREV, _, _) := REQUESTS_SORTED[0]
                        
                        for I, REQUEST in enumerate(REQUESTS_SORTED):
                            (USER_UID, TS1, TS2) := REQUEST
                            USER_TOTAL_TIME := USER_TOTAL_TIME + (TS2 - TS1)
                            USER_TOTAL_REQUESTS := USER_TOTAL_REQUESTS + 1
                            if USER_UID != USER_UID_PREV || I == length(REQUESTS_SORTED) - 1:
                                append (UID, USER_TOTAL_TIME/USER_TOTAL_REQUESTS) to USER_DATA
                                USER_UID_PREV := USER_UID
                        
                        USER_DATA_SORTED: [(UID, Time)] := descending elements (_, TS2) of USER_DATA sorted by TS2
                        (_, CUTOFF_TIME): Time := USER_DATA_SORTED[9 * length / 10]

                        SLOWEST_USERS_LIST := list of UID from elements (UID, TIME) of USER_DATA_SORTED where TIME > CUTOFF_TIME

                        for MSD in MSDS:
                            send SLOWEST_USERS to the /slowest endpoint of MSD
                        break

End